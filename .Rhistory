selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
names(gabon)
glimpse(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
grizzly <- read_csv(here("lab12", "data", "bear-sightings.csv"))
grizzly <- read_csv(here("lab12", "data", "bear-sightings.csv"))
install.packages("glue")
library(tidyverse)
library(janitor)
library("palmerpenguins")
options(scipen=999) #cancels the use of scientific notation for the session
install.packages("ggVennDiagram")
library("ggVennDiagram")
install.packages("ggworldcloud")
library("ggwordcloud")
penguins <- penguins
heartrate <- readr::read_csv("data/heartrate.csv")
heartrate <- heartrate %>%
add_column(no_drug = c(71, 79, 66, 62, 73, 81) )
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
runApp('GitHub/BIS15W2022_karen-kyutoku/app/homerange app 2.R')
runApp('GitHub/BIS15W2022_karen-kyutoku/app/homerange app 2.R')
library(tidyverse)
library(shiny)
library(shinydashboard)
penguins <- penguins
heartrate <- readr::read_csv("data/heartrate.csv")
heartrate <- heartrate %>%
add_column(no_drug = c(71, 79, 66, 62, 73, 81) )
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
install.packages(tidyverse)
library(tidyverse)
library(shiny)
library(shinydashboard)
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
install.packages("shinydashboard")
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- UC_admit %>%
filter(Ethnicity!="All")
knitr::opts_chunk$set(echo = TRUE)
UC_admit <- UC_admit %>%
filter(Ethnicity!="All")
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
head(penguins)
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(na.rm = TRUE)+
coord_flip()
library(tidyverse)
library(janitor)
library("palmerpenguins")
options(scipen=999) #cancels the use of scientific notation for the session
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(na.rm = TRUE)+
coord_flip()
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
penguins %>%
filter(sex == "female") %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = species)) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange
homerange %>%
ggplot(aes(x = taxon, y = log10.mass, fill = taxon)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
heartrate
heartrate_long <- heartrate %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_long
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
heartrate_long %>%
ggplot(aes(x= patient, y= drug, fill= heartrate)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
heartrate_diff <- heartrate%>%
mutate(across(c(a,b,c,d), ~ . - no_drug)) %>%
select(-no_drug) %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_diff
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="blue", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
penguins %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low=blue, mid=white, high = red)
penguins %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= blue, mid=white, high = red)
penguins %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= "blue", mid= "white", high = "red")
penguins %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= "blue", high = "red")
penguins %>%
filter(sex ="Female"|sex="Male")
penguins %>%
filter(sex ="female"|sex="male") %>%
penguins %>%
filter(sex =="female"| sex=="male") %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= "blue", high = "red")
penguins %>%
filter(sex =="female"| sex=="male") %>%
na.exclude() %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= "blue", high = "red")
penguins %>%
#filter(sex =="female"| sex=="male") %>%
na.exclude() %>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low= "blue", high = "red")
library(tidyverse)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
library(tidyverse)
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
install.packages("ggworldcloud")
library(ggwordcloud)
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
swimming_vec <- homerange %>%
filter(locomotion == "swimming")%>%
pull(common.name)
flying_vec
swimming_vec
fly_or_swim_list <- list(flying_vec, swimming_vec)
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
flying_vec
bird_vec <- homerange %>%
filter(taxon == "birds")%>%
pull(common.name)
bird_vec
fly_or_bird_list <- list(flying_vec, bird_vec)
ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"))
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange%>%
filter(taxon! = "birds")%>%
homerange%>%
filter(taxon != "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange%>%
filter(taxon!= "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
herbivore_vec <- homerange %>%
filter(trophic.guild == "herbivore")%>%
pull(common.name)
herbivore_vec
fly_bird_herbi_list <- list(flying_vec, bird_vec, herbivore_vec)
ggVennDiagram(fly_bird_herbi_list, category.names = c("Fly", "Bird", "Herbivore"))
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
# you can toggle edge size and label (Fly, Bird) colors here
ggVennDiagram(fly_or_bird_list,
set_color = c("black", "blue"),             # sets label colors
category.names = c("Fly", "Bird"),          # sets category label names
label_color = "firebrick",                  # sets overlap-quantity label color
label_size = 4                              # sets overlap-label size
)+
scale_color_brewer(palette = "Set3")+                   # sets palette for circle colors
scale_fill_distiller(palette = "Greys")+                # distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly") )
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
# Make the list of vectors:
four_circle_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
ggVennDiagram(four_circle_list, category.names = c("Swimming", "Carnivores", "Aquatic", "Ectotherm"))
# Make the plot:
names(homerange)
ecto_vec <- homerange %>%
filter(thermoregulation == "ectotherm")%>%
pull(common.name)
ecto_vec
# Make the plot:
ggVennDiagram(four_circle_list, category.names = c("Swimming", "Carnivores", "Aquatic", "Ectotherm"), label="count")
hr_taxon_count <- homerange %>%
count(taxon)
hr_taxon_count
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
reptilia_count
reptilia_count
reptilia_count <- homerange %>%
filter(class =="reptilia") %>%
count(family)
reptilia_count
reptilia_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
#install.packages("tidyverse")
install.packages("here")
#install.packages("tidyverse")
#install.packages("here")
install.packages("janitor")
library(janitor)
library(tidyverse)
library(here)
library(janitor)
getwd()
setwd("~/DAV-Lichens/data")
getwd()
lichens_data <- read_csv(here("data", "occurrences.csv"))
lichens_data <- read_csv(here("data", "occurrences.csv"))
lichens_data <- read_csv(here("data", "occurrences.csv"))
getwd()
knitr::opts_chunk$set(echo = TRUE)
lichen_data <- read_csv(here("data", "occurrences.csv")) %>% clean_names()
library(tidyverse)
library(here)
library(janitor)
library(ggthemes)
library(RColorBrewer)
library(paletteer)
library(skimr)
library(naniar)
getwd()
lichen_data <- read_csv(here("data", "occurrences.csv")) %>% clean_names()
lichen_data <- read_csv(here("occurrences.csv")) %>% clean_names()
berkeley_lichen <- read_csv(here("occurrences_berkeley.csv")) %>% clean_names()
lichens %>%
filter(state_province=="California") %>%
ggplot(aes(x= county, fill= county))+
geom_bar(position="dodge")+
coord_flip()+
labs(title = "Number of Lichens Collected from Different Counties in California",
x = "County",
y = "Number of Lichens")
lichen_data <- read_csv(here("occurrences.csv")) %>% clean_names()
lichen_data
lichens <- lichen_data %>%
select("class", "family", "scientific_name", "genus", "year", "country", "state_province", "county")
lichens
lichens %>%
filter(state_province=="California") %>%
group_by(year) %>%
summarize(n=n()) %>%
ggplot(aes(x=year, y=n))+
geom_line()+
theme(axis.text.x = element_text(angle= 60, hjust=1))+
labs(title = "Number of DAV lichens collected in California",
x="Year",
y="Total number of lichens")
lichens %>%
count(genus) %>%
arrange(desc(n))
lichens <- lichens %>%
na_if("Lichen") %>%
mutate(family=na_if(family, ("Lichen")))
lichens
naniar::miss_var_summary(lichens)
lichens %>%
filter(state_province == "California") %>%
count(family) %>%
arrange(desc(n))
lichens %>%
filter(state_province=="California") %>%
ggplot(aes(x= year, fill= family))+
geom_bar(position="dodge")+
coord_flip()+
labs(title = "Observations by Family in DAV Lichen Data",
x = "Year",
y = "Total",
fill = "Family")
lichens %>%
filter(state_province=="California") %>%
ggplot(aes(x=year, y=family, fill= family))+
geom_boxplot()
lichens %>%
filter(state_province=="California") %>%
ggplot(aes(x= year, fill= class))+
geom_bar(position="dodge")+
labs(title = "Observations by Class in DAV Lichen Data",
x = "Year",
y = "Total",
fill = "class")
lichens %>%
count(country) %>%
arrange(desc(n))
lichens %>%
filter(state_province=="California") %>%
count(county) %>%
arrange(desc(n))
lichens %>%
filter(state_province=="California") %>%
ggplot(aes(x= county, fill= county))+
geom_bar(position="dodge")+
coord_flip()+
labs(title = "Number of Lichens Collected from Different Counties in California",
x = "County",
y = "Number of Lichens")
berkeley_lichen <- read_csv(here("occurrences_berkeley.csv")) %>% clean_names()
berkeley_lichen %>%
filter(state_province=="California") %>%
group_by(year) %>%
summarize(n=n()) %>%
ggplot(aes(x=year, y=n))+
geom_line()+
theme(axis.text.x = element_text(angle= 60, hjust=1))+
labs(title = "Number of UC lichens collected in California",
x="Year",
y="Total number of lichens")
